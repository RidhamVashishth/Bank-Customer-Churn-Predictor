# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bk-smfIqGma5OMFiNtHaWwLcElY0lfci
"""

import streamlit as st
import pandas as pd
import joblib

# Load the trained pipeline
# This pipeline includes preprocessing (scaling, encoding) and the final model
try:
    model_pipeline = joblib.load('best_churn_model.joblib')
except FileNotFoundError:
    st.error("Model file 'best_churn_model.joblib' not found. Please ensure it's in the same folder as this app.")
    st.stop()

# --- Streamlit App UI ---
st.title("üè¶ Bank Customer Churn Predictor")
st.markdown("Enter the customer's details below to get a churn prediction.")

# Create columns for a cleaner layout
col1, col2 = st.columns(2)

with col1:
    st.subheader("Customer Demographics")
    geography = st.selectbox("Geography", ["France", "Germany", "Spain"])
    gender = st.selectbox("Gender", ["Male", "Female"])
    age = st.number_input("Age", min_value=18, max_value=100, value=35, step=1)

with col2:
    st.subheader("Account Information")
    tenure = st.number_input("Tenure (Years with Bank)", min_value=0, max_value=20, value=5, step=1)
    balance = st.number_input("Balance", min_value=0.0, value=50000.0, step=1000.0)
    credit_score = st.number_input("Credit Score", min_value=300, max_value=850, value=650, step=1)

st.subheader("Relationship & Activity")
num_of_products = st.selectbox("Number of Products", [1, 2, 3, 4], index=0)
has_cr_card = st.radio("Has Credit Card?", ["Yes", "No"])
is_active_member = st.radio("Is Active Member?", ["Yes", "No"])
estimated_salary = st.number_input("Estimated Salary", min_value=0.0, value=100000.0, step=5000.0)

# --- Prediction Logic ---
if st.button("Predict Churn", type="primary"):
    # Convert radio button inputs to 1s and 0s
    has_cr_card_int = 1 if has_cr_card == "Yes" else 0
    is_active_member_int = 1 if is_active_member == "Yes" else 0

    # Create a DataFrame from the user's input
    # The column names MUST match the names used during model training
    input_data = pd.DataFrame({
        'CreditScore': [credit_score],
        'Geography': [geography],
        'Gender': [gender],
        'Age': [age],
        'Tenure': [tenure],
        'Balance': [balance],
        'NumOfProducts': [num_of_products],
        'HasCrCard': [has_cr_card_int],
        'IsActiveMember': [is_active_member_int],
        'EstimatedSalary': [estimated_salary]
    })

    # Use the loaded pipeline to make a prediction
    # The pipeline will automatically apply the same preprocessing steps
    with st.spinner("Analyzing customer data..."):
        prediction = model_pipeline.predict(input_data)[0]
        prediction_proba = model_pipeline.predict_proba(input_data)[0]

    # Display the result
    st.subheader("Prediction Result")
    if prediction == 1:
        st.error(f"üî¥ High Risk: This customer is likely to churn.", icon="üö®")
        st.write(f"**Probability of Churn:** {prediction_proba[1]:.0%}")
        st.info("Recommendation: Proactively engage this customer with retention offers or personalized support.")
    else:
        st.success(f"üü¢ Low Risk: This customer is likely to stay.", icon="‚úÖ")
        st.write(f"**Probability of Churn:** {prediction_proba[1]:.0%}")













